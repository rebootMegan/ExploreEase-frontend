var x = Object.defineProperty, _ = Object.defineProperties;
var m = Object.getOwnPropertyDescriptors;
var j = Object.getOwnPropertySymbols;
var D = Object.prototype.hasOwnProperty, E = Object.prototype.propertyIsEnumerable;
var v = (s, e, t) => e in s ? x(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t, d = (s, e) => {
  for (var t in e || (e = {}))
    D.call(e, t) && v(s, t, e[t]);
  if (j)
    for (var t of j(e))
      E.call(e, t) && v(s, t, e[t]);
  return s;
}, o = (s, e) => _(s, m(e));
import { fileURLToPath as L } from "code-inspector-core";
import y, { dirname as P } from "path";
let f = "";
typeof __dirname != "undefined" ? f = __dirname : f = P(L(import.meta.url));
let l = !0;
const T = (s, e) => {
  var n, a;
  if (!l)
    return;
  l = !1;
  const t = (e == null ? void 0 : e.compiler) || e, r = (n = t == null ? void 0 : t.options) == null ? void 0 : n.module;
  ((r == null ? void 0 : r.rules) || (r == null ? void 0 : r.loaders) || []).push(
    d({
      test: (a = s == null ? void 0 : s.match) != null ? a : /\.(vue|jsx|tsx|js|ts|mjs|mts)$/,
      exclude: /node_modules/,
      use: [
        {
          loader: y.resolve(f, "./loader.js"),
          options: s
        }
      ]
    }, s.enforcePre === !1 ? {} : { enforce: "pre" }),
    o(d({}, s != null && s.injectTo ? { resource: s == null ? void 0 : s.injectTo } : {
      test: /\.(jsx|tsx|js|ts|mjs|mts)$/,
      exclude: /node_modules/
    }), {
      use: [
        {
          loader: y.resolve(f, "./inject-loader.js"),
          options: s
        }
      ],
      enforce: "post"
    })
  );
};
class g {
  constructor(e) {
    this.options = e || {};
  }
  apply(e) {
    var u, n, a, c, h, i;
    if (l = !0, this.options.close)
      return;
    let t;
    if (typeof ((u = this.options) == null ? void 0 : u.dev) == "function" ? t = (n = this.options) == null ? void 0 : n.dev() : t = (a = this.options) == null ? void 0 : a.dev, t === !1 || !t && ((c = e == null ? void 0 : e.options) == null ? void 0 : c.mode) !== "development" && process.env.NODE_ENV !== "development")
      return;
    ((i = (h = e == null ? void 0 : e.options) == null ? void 0 : h.cache) == null ? void 0 : i.type) === "filesystem" && (e.options.cache.version = "code-inspector-".concat(Date.now()));
    const r = {
      port: 0,
      entry: "",
      nextJsEntry: "",
      ssrEntry: ""
    };
    T(o(d({}, this.options), { record: r }), e);
  }
}
export {
  g as default
};
